Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PR_PACKAGE ID
Rule 2     program -> PR_IMPORT STRING
Rule 3     program -> PR_FUNC ID LEFT_PAREN RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
Rule 4     statement -> ID DOT ID LEFT_PAREN STRING RIGHT_PAREN

Terminals, with rules where they appear

DOT                  : 4
ID                   : 1 3 4 4
LEFT_BRACE           : 3
LEFT_PAREN           : 3 4
PR_FUNC              : 3
PR_IMPORT            : 2
PR_PACKAGE           : 1
RIGHT_BRACE          : 3
RIGHT_PAREN          : 3 4
STRING               : 2 4
error                : 

Nonterminals, with rules where they appear

program              : 0
statement            : 3

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PR_PACKAGE ID
    (2) program -> . PR_IMPORT STRING
    (3) program -> . PR_FUNC ID LEFT_PAREN RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE

    PR_PACKAGE      shift and go to state 2
    PR_IMPORT       shift and go to state 3
    PR_FUNC         shift and go to state 4

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PR_PACKAGE . ID

    ID              shift and go to state 5


state 3

    (2) program -> PR_IMPORT . STRING

    STRING          shift and go to state 6


state 4

    (3) program -> PR_FUNC . ID LEFT_PAREN RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE

    ID              shift and go to state 7


state 5

    (1) program -> PR_PACKAGE ID .

    $end            reduce using rule 1 (program -> PR_PACKAGE ID .)


state 6

    (2) program -> PR_IMPORT STRING .

    $end            reduce using rule 2 (program -> PR_IMPORT STRING .)


state 7

    (3) program -> PR_FUNC ID . LEFT_PAREN RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 8


state 8

    (3) program -> PR_FUNC ID LEFT_PAREN . RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 9


state 9

    (3) program -> PR_FUNC ID LEFT_PAREN RIGHT_PAREN . LEFT_BRACE statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 10


state 10

    (3) program -> PR_FUNC ID LEFT_PAREN RIGHT_PAREN LEFT_BRACE . statement RIGHT_BRACE
    (4) statement -> . ID DOT ID LEFT_PAREN STRING RIGHT_PAREN

    ID              shift and go to state 11

    statement                      shift and go to state 12

state 11

    (4) statement -> ID . DOT ID LEFT_PAREN STRING RIGHT_PAREN

    DOT             shift and go to state 13


state 12

    (3) program -> PR_FUNC ID LEFT_PAREN RIGHT_PAREN LEFT_BRACE statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 14


state 13

    (4) statement -> ID DOT . ID LEFT_PAREN STRING RIGHT_PAREN

    ID              shift and go to state 15


state 14

    (3) program -> PR_FUNC ID LEFT_PAREN RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .

    $end            reduce using rule 3 (program -> PR_FUNC ID LEFT_PAREN RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)


state 15

    (4) statement -> ID DOT ID . LEFT_PAREN STRING RIGHT_PAREN

    LEFT_PAREN      shift and go to state 16


state 16

    (4) statement -> ID DOT ID LEFT_PAREN . STRING RIGHT_PAREN

    STRING          shift and go to state 17


state 17

    (4) statement -> ID DOT ID LEFT_PAREN STRING . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 18


state 18

    (4) statement -> ID DOT ID LEFT_PAREN STRING RIGHT_PAREN .

    RIGHT_BRACE     reduce using rule 4 (statement -> ID DOT ID LEFT_PAREN STRING RIGHT_PAREN .)

